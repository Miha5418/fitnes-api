/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package ru.karpeikin.ru.fitnes.rest.admin.api.support;

import ru.karpeikin.ru.fitnes.rest.admin.api.dto.ApiResponseError;
import ru.karpeikin.ru.fitnes.rest.admin.api.dto.ClientInfo;
import ru.karpeikin.ru.fitnes.rest.admin.api.dto.ClientInfoPageable;
import ru.karpeikin.ru.fitnes.rest.admin.api.dto.PageParams;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-01-13T16:55:52.923522+07:00[Asia/Novosibirsk]")
@Validated
@Api(value = "Client", description = "the Client API")
public interface ClientApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /client/create
     * Создание дового клиента
     *
     * @param clientInfo  (required)
     * @return Слиент создан (status code 200)
     *         or Недопустимые параметры вызова (status code 400)
     *         or Пользователь не авторизирован (status code 401)
     */
    @ApiOperation(value = "", nickname = "addNewClient", notes = "Создание дового клиента", response = ClientInfo.class, tags={ "Client", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Слиент создан", response = ClientInfo.class),
        @ApiResponse(code = 400, message = "Недопустимые параметры вызова", response = ApiResponseError.class),
        @ApiResponse(code = 401, message = "Пользователь не авторизирован") })
    @PostMapping(
        value = "/client/create",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<ClientInfo> addNewClient(@ApiParam(value = "" ,required=true )  @Valid @RequestBody ClientInfo clientInfo) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"lastName\" : \"lastName\", \"midleName\" : \"midleName\", \"surName\" : \"surName\", \"mail\" : \"mail\", \"phone\" : \"phone\", \"memberShipDateEnd\" : \"2000-01-23T04:56:07.000+00:00\", \"isActive\" : true, \"memberShipNumber\" : \"memberShipNumber\", \"memberShipDateStart\" : \"2000-01-23T04:56:07.000+00:00\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /client/{clientId}
     * Получение одного клиента
     *
     * @param clientId Идентификатор слиента (required)
     * @return Информация о клиенте (status code 200)
     *         or Недопустимые параметры вызова (status code 400)
     *         or Пользователь не авторизирован (status code 401)
     */
    @ApiOperation(value = "", nickname = "getClientInfoById", notes = "Получение одного клиента", response = ClientInfo.class, tags={ "Client", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Информация о клиенте", response = ClientInfo.class),
        @ApiResponse(code = 400, message = "Недопустимые параметры вызова", response = ApiResponseError.class),
        @ApiResponse(code = 401, message = "Пользователь не авторизирован") })
    @GetMapping(
        value = "/client/{clientId}",
        produces = { "application/json" }
    )
    default ResponseEntity<ClientInfo> getClientInfoById(@ApiParam(value = "Идентификатор слиента",required=true) @PathVariable("clientId") Integer clientId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"lastName\" : \"lastName\", \"midleName\" : \"midleName\", \"surName\" : \"surName\", \"mail\" : \"mail\", \"phone\" : \"phone\", \"memberShipDateEnd\" : \"2000-01-23T04:56:07.000+00:00\", \"isActive\" : true, \"memberShipNumber\" : \"memberShipNumber\", \"memberShipDateStart\" : \"2000-01-23T04:56:07.000+00:00\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /client
     * Получение списка клиентов
     *
     * @param pageParams Параметры страницы с данными (optional)
     * @return Список клиентов (status code 200)
     *         or Недопустимые параметры вызова (status code 400)
     *         or Пользователь не авторизирован (status code 401)
     */
    @ApiOperation(value = "", nickname = "getListClientInfo", notes = "Получение списка клиентов", response = ClientInfoPageable.class, tags={ "Client", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Список клиентов", response = ClientInfoPageable.class),
        @ApiResponse(code = 400, message = "Недопустимые параметры вызова", response = ApiResponseError.class),
        @ApiResponse(code = 401, message = "Пользователь не авторизирован") })
    @GetMapping(
        value = "/client",
        produces = { "application/json" }
    )
    default ResponseEntity<ClientInfoPageable> getListClientInfo(@ApiParam(value = "Параметры страницы с данными") @Valid Optional<PageParams> pageParams) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : [ { \"lastName\" : \"lastName\", \"midleName\" : \"midleName\", \"surName\" : \"surName\", \"mail\" : \"mail\", \"phone\" : \"phone\", \"memberShipDateEnd\" : \"2000-01-23T04:56:07.000+00:00\", \"isActive\" : true, \"memberShipNumber\" : \"memberShipNumber\", \"memberShipDateStart\" : \"2000-01-23T04:56:07.000+00:00\" }, { \"lastName\" : \"lastName\", \"midleName\" : \"midleName\", \"surName\" : \"surName\", \"mail\" : \"mail\", \"phone\" : \"phone\", \"memberShipDateEnd\" : \"2000-01-23T04:56:07.000+00:00\", \"isActive\" : true, \"memberShipNumber\" : \"memberShipNumber\", \"memberShipDateStart\" : \"2000-01-23T04:56:07.000+00:00\" } ], \"pageParams\" : { \"pageTotal\" : 1, \"pageSize\" : 8, \"pageCurrent\" : 1 } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
