/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package ru.karpeikin.ru.fitnes.rest.telegram.api.support;

import ru.karpeikin.ru.fitnes.rest.telegram.api.dto.ApiResponseError;
import ru.karpeikin.ru.fitnes.rest.telegram.api.dto.Login;
import ru.karpeikin.ru.fitnes.rest.telegram.api.dto.LoginResponseMessage;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-01-20T13:51:57.835695+07:00[Asia/Novosibirsk]")
@Validated
@Api(value = "Auth", description = "the Auth API")
public interface AuthApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /auth/login
     * Вход пользователя
     *
     * @param login  (required)
     * @return Авторизация прошла успешно (status code 200)
     *         or Недопустимые параметры вызова (status code 400)
     */
    @ApiOperation(value = "", nickname = "login", notes = "Вход пользователя", response = LoginResponseMessage.class, tags={ "Auth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Авторизация прошла успешно", response = LoginResponseMessage.class),
        @ApiResponse(code = 400, message = "Недопустимые параметры вызова", response = ApiResponseError.class) })
    @PostMapping(
        value = "/auth/login",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<LoginResponseMessage> login(@ApiParam(value = "" ,required=true )  @Valid @RequestBody Login login) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"tokenType\" : \"tokenType\", \"token\" : \"token\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
